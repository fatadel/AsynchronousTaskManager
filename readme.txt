# Python used - 3.7.1
# Redis used - 2.4.5 (inside repo)
# Tested on OS Windows 8
# The Redis distribution is inside this repo. Take into account that using other version of Redis might need to alter Redis connection string.

TASK:

При реализации лучше не использовать celery. 

Задание:
Необходимо реализовать прототип веб-сервиса по организации очереди задач.
Допускается труднореализуемые или непонятные моменты описать алгоритмически.

Требования к прототипу:
1. Реализовать вызов API, при обращении к которому создается задача, которая добавляется в очередь, и пользователю возвращается номер задачи.
   Второй вызов API возвращает статус задачи в формате json {'status:'', 'create_time":'', 'start_time':'', 'time_to_execute':''}.
Статусы:
   - In Queue     -- задача ждёт своей очереди на выполнение;
   - Run          -- произошел запуск задачи;
   - Completed    -- задача выполнена.
3. Выполнение задачи представляет собой простой python-код (test.py):
"
import time
import random
time.sleep(random.randint(0,10))
"

Обратите внимание:
!!! можно создавать множество задач, но выполняться одновременно должно не более 2 (двух).
!!! результаты записать в локальную БД с полями: id (первичный ключ, номер поставленной задачи), create_time (время создания задачи), start_time (время старта задачи), exec_time (время выполнения задачи)

Требования к окружению, фреймворкам и используемым программам:
- Python 3.x;
- БД PostgreSQL, MySQL,  Redis etc;
- Django, Flask, aiohttp, etx.